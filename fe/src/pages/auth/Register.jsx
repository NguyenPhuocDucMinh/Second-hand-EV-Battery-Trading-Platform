import { useState } from "react"
import { useNavigate, Link } from "react-router-dom"
import { Card, Button, Form, Alert, Container, Row, Col, InputGroup } from "react-bootstrap"

function Register({ setIsLoggedIn, setUserInfo }) {
  // State qu·∫£n l√Ω form ƒëƒÉng k√Ω
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: ''
  })
  const [showAlert, setShowAlert] = useState(false)
  const [alertMessage, setAlertMessage] = useState('')
  const [alertVariant, setAlertVariant] = useState('success')
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  
  const navigate = useNavigate()

  // X·ª≠ l√Ω thay ƒë·ªïi input form
  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa email
  const isValidEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return emailRegex.test(email)
  }

  // H√†m toggle hi·ªÉn th·ªã m·∫≠t kh·∫©u
  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword)
  }

  // H√†m toggle hi·ªÉn th·ªã m·∫≠t kh·∫©u x√°c nh·∫≠n
  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(!showConfirmPassword)
  }

  // X·ª≠ l√Ω submit form ƒëƒÉng k√Ω
  const handleSubmit = (e) => {
    e.preventDefault()
    
    // Ki·ªÉm tra email h·ª£p l·ªá
    if (!isValidEmail(formData.email)) {
      setAlertMessage('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ email h·ª£p l·ªá!')
      setAlertVariant('danger')
      setShowAlert(true)
      return
    }

    // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u
    if (formData.password.length < 6) {
      setAlertMessage('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!')
      setAlertVariant('danger')
      setShowAlert(true)
      return
    }

    // Ki·ªÉm tra x√°c nh·∫≠n m·∫≠t kh·∫©u
    if (formData.password !== formData.confirmPassword) {
      setAlertMessage('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!')
      setAlertVariant('danger')
      setShowAlert(true)
      return
    }

    // Demo: lu√¥n ƒëƒÉng k√Ω th√†nh c√¥ng
    setAlertMessage('ƒêƒÉng k√Ω th√†nh c√¥ng!')
    setAlertVariant('success')
    setShowAlert(true)
    
    // L∆∞u th√¥ng tin user
    const userInfo = {
      email: formData.email,
      fullName: 'Ng∆∞·ªùi d√πng',
      loginTime: new Date().toISOString()
    }
    
    // Ch·ªù 1.5 gi√¢y r·ªìi chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
    setTimeout(() => {
      setIsLoggedIn(true)
      setUserInfo(userInfo)
      navigate("/")
    }, 1500)
  }

  return (
    <div 
      className="min-vh-100 d-flex align-items-center py-5" 
      style={{ 
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
      }}
    >
      <Container>
        <Row className="justify-content-center">
          <Col md={6} lg={5}>
            {/* Card ch√≠nh ch·ª©a form ƒëƒÉng k√Ω */}
            <Card className="shadow-lg border-0" style={{ borderRadius: '20px' }}>
              <Card.Body className="p-5">
                {/* Ti√™u ƒë·ªÅ form ƒëƒÉng k√Ω */}
                <div className="text-center mb-4">
                  <div style={{ fontSize: '3rem' }}>üîã</div>
                  <h2 className="fw-bold text-success mb-2">
                    T·∫°o T√†i Kho·∫£n M·ªõi
                  </h2>
                  <p className="text-muted">
                    Tham gia c·ªông ƒë·ªìng pin EV c·ªßa ch√∫ng t√¥i
                  </p>
                </div>

                {/* Hi·ªÉn th·ªã th√¥ng b√°o */}
                {showAlert && (
                  <Alert 
                    variant={alertVariant} 
                    onClose={() => setShowAlert(false)} 
                    dismissible
                    className="text-center"
                  >
                    {alertMessage}
                  </Alert>
                )}

                {/* Form ƒëƒÉng k√Ω */}
                <Form onSubmit={handleSubmit}>
                  {/* Tr∆∞·ªùng email */}
                  <Form.Group className="mb-3">
                    <Form.Label className="fw-semibold">
                      ƒê·ªãa Ch·ªâ Email
                    </Form.Label>
                    <Form.Control 
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      placeholder="example@email.com"
                      required
                      style={{ borderRadius: '10px', padding: '12px' }}
                    />
                  </Form.Group>

                  {/* Tr∆∞·ªùng m·∫≠t kh·∫©u v·ªõi n√∫t show/hide */}
                  <Form.Group className="mb-3">
                    <Form.Label className="fw-semibold">
                      M·∫≠t Kh·∫©u
                    </Form.Label>
                    <InputGroup>
                      <Form.Control 
                        type={showPassword ? "text" : "password"}
                        name="password"
                        value={formData.password}
                        onChange={handleInputChange}
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u (t·ªëi thi·ªÉu 6 k√Ω t·ª±)"
                        required
                        style={{ borderRadius: '10px 0 0 10px', padding: '12px' }}
                      />
                      <Button
                        variant="outline-secondary"
                        onClick={togglePasswordVisibility}
                        style={{ 
                          borderRadius: '0 10px 10px 0',
                          borderLeft: 'none',
                          padding: '12px 15px'
                        }}
                        title={showPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                      >
                        {showPassword ? "·∫®n" : "Hi·ªán"}
                      </Button>
                    </InputGroup>
                  </Form.Group>

                  {/* Tr∆∞·ªùng x√°c nh·∫≠n m·∫≠t kh·∫©u v·ªõi n√∫t show/hide */}
                  <Form.Group className="mb-4">
                    <Form.Label className="fw-semibold">
                      X√°c Nh·∫≠n M·∫≠t Kh·∫©u
                    </Form.Label>
                    <InputGroup>
                      <Form.Control 
                        type={showConfirmPassword ? "text" : "password"}
                        name="confirmPassword"
                        value={formData.confirmPassword}
                        onChange={handleInputChange}
                        placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                        required
                        style={{ borderRadius: '10px 0 0 10px', padding: '12px' }}
                      />
                      <Button
                        variant="outline-secondary"
                        onClick={toggleConfirmPasswordVisibility}
                        style={{ 
                          borderRadius: '0 10px 10px 0',
                          borderLeft: 'none',
                          padding: '12px 15px'
                        }}
                        title={showConfirmPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                      >
                        {showConfirmPassword ? "·∫®n" : "Hi·ªán"}
                      </Button>
                    </InputGroup>
                  </Form.Group>

                  {/* N√∫t ƒëƒÉng k√Ω */}
                  <Button 
                    type="submit" 
                    variant="success"
                    className="w-100 fw-bold py-3"
                    style={{ borderRadius: '10px', fontSize: '1.1rem' }}
                  >
                    T·∫°o T√†i Kho·∫£n
                  </Button>
                </Form>
              </Card.Body>
            </Card>

            {/* Footer th√¥ng tin chuy·ªÉn ƒë·∫øn ƒëƒÉng nh·∫≠p */}
            <div className="text-center mt-4 text-white">
              <small>
                ƒê√£ c√≥ t√†i kho·∫£n? {' '}
                <Link 
                  to="/login"
                  className="text-white fw-bold text-decoration-underline"
                >
                  ƒêƒÉng nh·∫≠p ngay
                </Link>
              </small>
            </div>
          </Col>
        </Row>
      </Container>
    </div>
  )
}

export default Register